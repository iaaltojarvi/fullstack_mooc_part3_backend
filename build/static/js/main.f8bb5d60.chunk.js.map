{"version":3,"sources":["services/personService.js","components/Persons.js","components/PersonForm.js","components/Filter.js","components/Notification.js","components/ErrorNotification.js","components/App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Persons","persons","setPersons","setMessage","setShowMessage","map","person","i","key","name","number","onClick","window","confirm","personService","res","personsCopy","personToDelete","find","p","index","indexOf","splice","setTimeout","catch","error","console","log","onRemove","PersonForm","setErrorMessage","useState","inputs","setInputs","handleChange","event","persist","target","value","onChange","preventDefault","undefined","toLowerCase","personToUpdate","updateId","changedPerson","returnedPerson","message","personObject","concat","onAdd","type","Filter","filtered","filter","includes","Notification","className","ErrorNotification","errorMessage","App","showMessage","useEffect","initialPersons","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f8bb5d60.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, remove }","import React from 'react'\nimport personService from '../services/personService'\n\nconst Persons = ({ persons, setPersons, setMessage, setShowMessage }) => {\n\n  function onRemove(person) {\n    if (window.confirm(`Do you really want to delete ${person.name}`)) {\n    personService\n      .remove(person.id)\n      .then(res => {\n        let personsCopy = [...persons];\n        const personToDelete = persons.find(p => p.id === person.id);\n        const index = personsCopy.indexOf(personToDelete);\n        personsCopy.splice(index, 1);\n        setPersons(personsCopy);\n        setShowMessage(true);\n        setMessage(`Deleted ${person.name}`)\n        setTimeout(() => setShowMessage(false), 3000);\n      })\n      .catch(error => {\n        console.log(`${error} in remove`);\n      })\n    } else {\n      return;\n    }\n  }\n\n  return (\n    <>\n      {persons && persons.map((person, i) =>\n        <div key={i}>\n          <p>{person.name} {person.number}\n            <button onClick={() => onRemove(person)}>Delete</button>\n          </p>\n        </div>\n      )}\n    </>\n  )\n};\n\nexport default Persons;","import React, { useState } from 'react'\nimport personService from '../services/personService'\n\nconst PersonForm = ({ setPersons, persons, setMessage, setErrorMessage, setShowMessage }) => {\n    const [inputs, setInputs] = useState({\n        name: '',\n        number: ''\n    })\n\n    const handleChange = (event) => {\n        event.persist();\n        setInputs(inputs => ({ ...inputs, [event.target.name]: event.target.value }));\n    }\n\n    const onAdd = (event) => {\n        event.preventDefault()\n        const ifInList = persons.find(person => person.name.toLowerCase() === inputs.name.toLowerCase()) !== undefined;\n        if (ifInList) {\n            if (window.confirm(`Name ${inputs.name} is already in the list, replace the old number with a new one?`)) {\n                const personToUpdate = persons.find(p => p.name.toLowerCase() === inputs.name.toLowerCase());\n                const updateId = personToUpdate.id;\n                const changedPerson = { name: inputs.name, number: inputs.number };\n                personService\n                    .update(updateId, changedPerson)\n                    .then(returnedPerson => {\n                        let personsCopy = [...persons];\n                        const index = personsCopy.indexOf(personToUpdate);\n                        personsCopy[index] = returnedPerson;\n                        setPersons(personsCopy);\n                        setInputs({ name: '', number: '' })\n                    })\n                    .catch(error => {\n                        if (error.message === \"Request failed with status code 404\") {\n                            setShowMessage(true);\n                            setErrorMessage(`${inputs.name} is no longer available in the phone book`)\n                            setTimeout(() => setShowMessage(false), 3000);\n                        }\n                        console.log(`${error} in update`);\n                    })\n                setMessage(`Updated the number of ${inputs.name}`)\n            } else {\n                setInputs({ name: '', number: '' })\n                return;\n            }\n        } else {\n            const personObject = {\n                name: inputs.name,\n                number: inputs.number\n            }\n            personService\n                .create(personObject)\n                .then(returnedPerson => {\n                    setPersons(persons.concat(returnedPerson))\n                    setInputs({ name: '', number: '' })\n                    setShowMessage(true);\n                    setMessage(`Added ${inputs.name}`)\n                    setTimeout(() => setShowMessage(false), 3000);\n                })\n                .catch(error => {\n                    console.log(`${error} in post`);\n                })\n\n        }\n    }\n\n    return (\n        <form>\n            <div>\n                name: <input value={inputs.name} name=\"name\" onChange={handleChange} />\n            </div>\n            <div>\n                phone number: <input value={inputs.number} name=\"number\" onChange={handleChange} />\n            </div>\n            <div>\n                <button onClick={(event) => onAdd(event)} type=\"submit\">add</button>\n            </div>\n        </form>\n    )\n};\n\nexport default PersonForm;","import React from 'react'\n\nconst Filter = ({setPersons, persons}) => {\n\n     const filter = (event) => {\n        const filtered = persons.filter(person => person.name.toLowerCase().includes(event.target.value.toLowerCase()));\n        setPersons(filtered);\n    }\n    return (\n              <form>\n                <div>\n                    Filter: <input name=\"filter\" onChange={filter}/>\n                </div>\n            </form>\n    )\n};\n\nexport default Filter;","import React from 'react'\n\nconst Notification = ({ message }) => {\n    return (\n      <div className=\"notification\">\n        {message}\n      </div>\n    )\n  }\n\n  export default Notification","import React from 'react'\n\nconst ErrorNotification = ({ errorMessage }) => {\n    return (\n      <div className=\"errorNotification\">\n        {errorMessage}\n      </div>\n    )\n  }\n\n  export default ErrorNotification","import React, { useState, useEffect } from 'react'\nimport personService from '../services/personService'\nimport Persons from './Persons'\nimport PersonForm from './PersonForm';\nimport Filter from './Filter'\nimport Notification from './Notification';\nimport ErrorNotification from './ErrorNotification';\nimport './App.css'\n\nconst App = () => {\n    const [persons, setPersons] = useState([]);\n    const [message, setMessage] = useState(null)\n    const [showMessage, setShowMessage] = useState(false)\n    const [errorMessage, setErrorMessage] = useState(null)\n\n    useEffect(() => {\n        personService\n            .getAll()\n            .then(initialPersons => {\n                setPersons(initialPersons)\n            })\n            .catch(error => {\n                console.log(`${error} in get`)\n            })\n    }, [])\n\n    return (\n        <div>\n                <>\n                    <h2>Phone book</h2>\n                    {showMessage && message !== null && errorMessage === null &&\n                    <Notification message={message} />\n                    }\n                    {showMessage && errorMessage !== null &&\n                    <ErrorNotification errorMessage={errorMessage} />\n                    }\n                    <Filter\n                        persons={persons}\n                        setPersons={setPersons}\n                    />\n                    <h3>Add new</h3>\n                    <PersonForm\n                        persons={persons}\n                        setPersons={setPersons}\n                        setMessage={setMessage}\n                        setErrorMessage={setErrorMessage}\n                        setShowMessage={setShowMessage}\n                    />\n                    <h3>Numbers</h3>\n                    <Persons \n                        persons={persons}\n                        setPersons={setPersons}\n                        setMessage={setMessage}\n                        setShowMessage={setShowMessage}\n                     />\n                </>\n        </div>\n    )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}